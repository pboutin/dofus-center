{"version":3,"sources":["dofus-workbench/tests/app.jshint.js","dofus-workbench/tests/components/fixed-panel.jshint.js","dofus-workbench/tests/components/quantity-editor.jshint.js","dofus-workbench/tests/controllers/crafting.jshint.js","dofus-workbench/tests/controllers/prepare.jshint.js","dofus-workbench/tests/controllers/projects.jshint.js","dofus-workbench/tests/helpers/destroy-app.js","dofus-workbench/tests/helpers/destroy-app.jshint.js","dofus-workbench/tests/helpers/ember-i18n/test-helpers.js","dofus-workbench/tests/helpers/module-for-acceptance.js","dofus-workbench/tests/helpers/module-for-acceptance.jshint.js","dofus-workbench/tests/helpers/resolver.js","dofus-workbench/tests/helpers/resolver.jshint.js","dofus-workbench/tests/helpers/start-app.js","dofus-workbench/tests/helpers/start-app.jshint.js","dofus-workbench/tests/initializers/register-objects.jshint.js","dofus-workbench/tests/initializers/services-initialization.jshint.js","dofus-workbench/tests/integration/components/fixed-panel-test.js","dofus-workbench/tests/integration/components/fixed-panel-test.jshint.js","dofus-workbench/tests/integration/components/quantity-editor-test.js","dofus-workbench/tests/integration/components/quantity-editor-test.jshint.js","dofus-workbench/tests/locales/fr/config.jshint.js","dofus-workbench/tests/locales/fr/translations.jshint.js","dofus-workbench/tests/objects/item.jshint.js","dofus-workbench/tests/objects/project.jshint.js","dofus-workbench/tests/objects/quantifiable.jshint.js","dofus-workbench/tests/resolver.jshint.js","dofus-workbench/tests/router.jshint.js","dofus-workbench/tests/routes/crafting.jshint.js","dofus-workbench/tests/routes/prepare.jshint.js","dofus-workbench/tests/routes/projects.jshint.js","dofus-workbench/tests/services/dofus-data.jshint.js","dofus-workbench/tests/services/workbench.jshint.js","dofus-workbench/tests/test-helper.js","dofus-workbench/tests/test-helper.jshint.js","dofus-workbench/tests/unit/controllers/crafting-test.js","dofus-workbench/tests/unit/controllers/crafting-test.jshint.js","dofus-workbench/tests/unit/controllers/prepare-test.js","dofus-workbench/tests/unit/controllers/prepare-test.jshint.js","dofus-workbench/tests/unit/controllers/projects-test.js","dofus-workbench/tests/unit/controllers/projects-test.jshint.js","dofus-workbench/tests/unit/initializers/dofus-data-test.js","dofus-workbench/tests/unit/initializers/dofus-data-test.jshint.js","dofus-workbench/tests/unit/initializers/register-objects-test.js","dofus-workbench/tests/unit/initializers/register-objects-test.jshint.js","dofus-workbench/tests/unit/initializers/workbench-test.js","dofus-workbench/tests/unit/initializers/workbench-test.jshint.js","dofus-workbench/tests/unit/routes/application-test.js","dofus-workbench/tests/unit/routes/application-test.jshint.js","dofus-workbench/tests/unit/routes/crafting-test.js","dofus-workbench/tests/unit/routes/crafting-test.jshint.js","dofus-workbench/tests/unit/routes/prepare-test.js","dofus-workbench/tests/unit/routes/prepare-test.jshint.js","dofus-workbench/tests/unit/routes/projects-test.js","dofus-workbench/tests/unit/routes/projects-test.jshint.js","dofus-workbench/tests/unit/services/dofus-data-test.js","dofus-workbench/tests/unit/services/dofus-data-test.jshint.js","dofus-workbench/tests/unit/services/workbench-test.js","dofus-workbench/tests/unit/services/workbench-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dofus-workbench/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/components/fixed-panel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/fixed-panel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/fixed-panel.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/components/quantity-editor.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/quantity-editor.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/quantity-editor.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/controllers/crafting.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/crafting.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/crafting.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/controllers/prepare.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/prepare.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/prepare.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/controllers/projects.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/projects.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/projects.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dofus-workbench/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof ok === 'function') {\n      return function (element, key, text) {\n        ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('dofus-workbench/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dofus-workbench/tests/helpers/start-app', 'dofus-workbench/tests/helpers/destroy-app'], function (exports, _qunit, _dofusWorkbenchTestsHelpersStartApp, _dofusWorkbenchTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dofusWorkbenchTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dofusWorkbenchTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dofus-workbench/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/helpers/resolver', ['exports', 'dofus-workbench/resolver', 'dofus-workbench/config/environment'], function (exports, _dofusWorkbenchResolver, _dofusWorkbenchConfigEnvironment) {\n\n  var resolver = _dofusWorkbenchResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dofusWorkbenchConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dofusWorkbenchConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dofus-workbench/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/helpers/start-app', ['exports', 'ember', 'dofus-workbench/app', 'dofus-workbench/config/environment'], function (exports, _ember, _dofusWorkbenchApp, _dofusWorkbenchConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dofusWorkbenchConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dofusWorkbenchApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dofus-workbench/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/initializers/register-objects.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/register-objects.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/register-objects.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/initializers/services-initialization.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/services-initialization.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/services-initialization.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/integration/components/fixed-panel-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('fixed-panel', 'Integration | Component | fixed panel', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'fixed-panel', ['loc', [null, [1, 0], [1, 15]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'fixed-panel', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dofus-workbench/tests/integration/components/fixed-panel-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/fixed-panel-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/fixed-panel-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/integration/components/quantity-editor-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('quantity-editor', 'Integration | Component | quantity editor', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'quantity-editor', ['loc', [null, [1, 0], [1, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'quantity-editor', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dofus-workbench/tests/integration/components/quantity-editor-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/quantity-editor-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/quantity-editor-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/locales/fr/config.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | locales/fr/config.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/fr/config.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/locales/fr/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | locales/fr/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/fr/translations.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/objects/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | objects/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'objects/item.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/objects/project.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | objects/project.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'objects/project.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/objects/quantifiable.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | objects/quantifiable.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'objects/quantifiable.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/routes/crafting.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/crafting.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/crafting.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/routes/prepare.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/prepare.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/prepare.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/routes/projects.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/projects.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/projects.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/services/dofus-data.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/dofus-data.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/dofus-data.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/services/workbench.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/workbench.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/workbench.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/test-helper', ['exports', 'dofus-workbench/tests/helpers/resolver', 'ember-qunit'], function (exports, _dofusWorkbenchTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dofusWorkbenchTestsHelpersResolver['default']);\n});","define('dofus-workbench/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/controllers/crafting-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:crafting', 'Unit | Controller | crafting', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dofus-workbench/tests/unit/controllers/crafting-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/crafting-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/crafting-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/controllers/prepare-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:prepare', 'Unit | Controller | prepare', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dofus-workbench/tests/unit/controllers/prepare-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/prepare-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/prepare-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/controllers/projects-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:projects', 'Unit | Controller | projects', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dofus-workbench/tests/unit/controllers/projects-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/projects-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/projects-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/initializers/dofus-data-test', ['exports', 'ember', 'dofus-workbench/initializers/dofus-data', 'qunit'], function (exports, _ember, _dofusWorkbenchInitializersDofusData, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | dofus data', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _dofusWorkbenchInitializersDofusData['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dofus-workbench/tests/unit/initializers/dofus-data-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/dofus-data-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/dofus-data-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/initializers/register-objects-test', ['exports', 'ember', 'dofus-workbench/initializers/register-objects', 'qunit'], function (exports, _ember, _dofusWorkbenchInitializersRegisterObjects, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | register objects', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _dofusWorkbenchInitializersRegisterObjects['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dofus-workbench/tests/unit/initializers/register-objects-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/register-objects-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/register-objects-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/initializers/workbench-test', ['exports', 'ember', 'dofus-workbench/initializers/workbench', 'qunit'], function (exports, _ember, _dofusWorkbenchInitializersWorkbench, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | workbench', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _dofusWorkbenchInitializersWorkbench['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dofus-workbench/tests/unit/initializers/workbench-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/workbench-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/workbench-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dofus-workbench/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/routes/crafting-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:crafting', 'Unit | Route | crafting', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dofus-workbench/tests/unit/routes/crafting-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/crafting-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/crafting-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/routes/prepare-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:prepare', 'Unit | Route | prepare', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dofus-workbench/tests/unit/routes/prepare-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/prepare-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/prepare-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/routes/projects-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:projects', 'Unit | Route | projects', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dofus-workbench/tests/unit/routes/projects-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/projects-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/projects-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/services/dofus-data-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:dofus-data', 'Unit | Service | dofus data', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dofus-workbench/tests/unit/services/dofus-data-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/dofus-data-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/dofus-data-test.js should pass jshint.');\n  });\n});","define('dofus-workbench/tests/unit/services/workbench-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:workbench', 'Unit | Service | workbench', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dofus-workbench/tests/unit/services/workbench-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/workbench-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/workbench-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dofus-workbench/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}